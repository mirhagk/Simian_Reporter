// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Simian_Reporter
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class LaTeX_Report : LaTeX_ReportBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\\documentclass{report}[10pt]\r\n\r\n\\usepackage[colorlinks=true, linkcolor=black, url" +
                    "color=blue]{hyperref}\r\n\\usepackage{textcomp }\r\n\r\n\r\n\\newcommand{\\fileLocation}[2]" +
                    "{$\\textrangle$ #1 \\textbf{---} #2}\r\n\r\n\\title{Simian Report}\r\n\r\n\\begin{document}\r" +
                    "\n\r\n\\maketitle\r\n\r\n\\tableofcontents\r\n\r\n\r\n\\chapter{About this report}\r\n\r\nThis repor" +
                    "t was auto-generated using the Simian Reporter tool. This tool takes the result " +
                    "of running the \\href{http://www.harukizaemon.com/simian/index.html}{Simian code " +
                    "detection tool} and generates this report based on that. This report is very use" +
                    "ful to look at the results when running Simian on a large number of lines of cod" +
                    "e, where it reports many duplicate blocks. You can use this report to get a bett" +
                    "er idea of what files should have common functionality removed. It\'s also useful" +
                    " as a team report to report on the amount of code duplication.\r\n\r\n\\section{Copyr" +
                    "ight}\r\n\r\nThis report tool is free to use for non-commercial/non-government and e" +
                    "valuation purposes (evaluation must be no longer than 15 days). In order to gene" +
                    "rate reports for commercial or government purposes, an appropriate license must " +
                    "be obtained for both Simian and for this tool.\r\n\r\nThese reports may only be dist" +
                    "ributed if the generator of the reports has the permission of both Simian and th" +
                    "is report generator.\r\n\r\n\\section{Parts of this report}\r\n\r\nThis report contains s" +
                    "everal chapters which are different views of the result of the code analysis. Us" +
                    "e whichever view is most appropriate.\r\n\r\n\\subsection{Overview}\r\n\r\nAn overview of" +
                    " the result of the analysis is contained here. It idenfies which files are prime" +
                    " candidates for refactoring out common functionality. It also reports on the amo" +
                    "unt of duplication in the project, and gives a score for the project.\r\n\r\n\r\n\\subs" +
                    "ection{File to File comparison}\r\n\r\nThis chapter will group all the matching bloc" +
                    "ks into sections based upon the files they compare. This gives a much better vie" +
                    "w to look at than the block level which Simian provides. The comparisons in this" +
                    " section are ordered by total number of similar lines contained in the files.\r\n\r" +
                    "\n\\subsection{Suggestions for functions}\r\n\r\nA more experimental chapter which con" +
                    "tains suggested new classes or functions. \r\n\r\n\\subsection{Raw Data}\r\n\r\nThis chap" +
                    "ter contains all the raw data from the Simian tool. It is included here so that " +
                    "the original Simian report is not needed (except to maybe recompile this documen" +
                    "t) and can be discarded. All the blocks that are listed as duplicates are placed" +
                    " in this chapeter. Each section contains one block, and states the source files," +
                    " and their start and ending lines, along with how much data is matching.\r\n\r\nIf t" +
                    "his report is generated on the same machine as the Simian report was generated, " +
                    "and the report has access to the same files as the simian report, then this sect" +
                    "ion will gain additional data not included in the Simian Report. This will inclu" +
                    "de the size of the files, as well as the lines of code that are marked as matchi" +
                    "ng. Including the lines of code could potentially make this report very large, s" +
                    "o be warned.\r\n\r\n\\chapter{Overview}\r\n\r\nThe project scanned has ");
            
            #line 53 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(report.summary.DuplicateFileCount));
            
            #line default
            #line hidden
            this.Write(" duplicate files, with a total of ");
            
            #line 53 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(report.summary.DuplicateLineCount));
            
            #line default
            #line hidden
            this.Write(".\r\n\r\nThe project contains ");
            
            #line 55 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(report.summary.TotalRawLineCount));
            
            #line default
            #line hidden
            this.Write(" of which ");
            
            #line 55 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(report.summary.TotalSignificantLineCount));
            
            #line default
            #line hidden
            this.Write(" are significants lines\\footnote{Significant lines are lines that aren\'t whitespa" +
                    "ce or comments, or other noise}. This means ");
            
            #line 55 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0:0.#}",(float)report.summary.DuplicateLineCount/report.summary.TotalSignificantLineCount*100)));
            
            #line default
            #line hidden
            this.Write("\\% of lines are duplicated, and the project could be reduced to ");
            
            #line 55 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((float)report.summary.TotalSignificantLineCount - report.summary.DuplicateLineCount));
            
            #line default
            #line hidden
            this.Write(" significant lines of code, a ");
            
            #line 55 "C:\Users\mirhagk\Documents\GitHub\Simian_Reporter\Simian Reporter\Simian Reporter\LaTeX_Report.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0:0.#}",((float)report.summary.TotalSignificantLineCount - report.summary.DuplicateLineCount)/report.summary.TotalSignificantLineCount*100)));
            
            #line default
            #line hidden
            this.Write(@"\% reduction.


            public int DuplicateFileCount { get; set; }
            public int DuplicateLineCount { get; set; }
            public int DuplicateBlockCount { get; set; }
            public int TotalFileCount { get; set; }
            public int TotalRawLineCount { get; set; }
            public int TotalSignificantLineCount { get; set; }
            public int ProcessingTime { get; set; }


\chapter{File to File comparison}

\section{Browser.js - Writer.js}

\fileLocation{Writer.js}{C:\textbackslash Users\textbackslash nathan\textbackslash Documents\textbackslash Github\textbackslash personalsite\textbackslash website\textbackslash node\_modules\textbackslash bliss\textbackslash lib\textbackslash writer.js}\\\\

\hrulefill

{test}

\chapter{Suggestions for functions}

\chapter{Raw Data}


\end{document}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class LaTeX_ReportBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
